{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"set",
				"set_relay"
			],
			[
				"out_light_",
				"out_light_garage"
			],
			[
				"timer_",
				"timer_flash_garage"
			],
			[
				"DELAY_",
				"DELAY_FLASH_GARAGE"
			],
			[
				"timer",
				"timer_alert"
			],
			[
				"nox_",
				"in_nox_power"
			],
			[
				"req",
				"state_requested"
			],
			[
				"in_",
				"in_pir_terrasse"
			],
			[
				"in_no",
				"in_nox_power"
			],
			[
				"sta",
				"state_requested"
			],
			[
				"out",
				"out_light_terrasse"
			],
			[
				"in",
				"info"
			],
			[
				"exe",
				"execute_check_output"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/noxAlarmProcess.py",
			"settings":
			{
				"buffer_size": 12967,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/config.py",
			"settings":
			{
				"buffer_size": 2243,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "# coding: utf-8\nfrom gevent import monkey\nmonkey.patch_all()\n\nfrom os.path import abspath  as abspath  # Convert relative to absolute path\nfrom os.path import dirname  as dirname  # Name of the last directory of a path\nfrom os.path import basename as basename\nfrom os.path import join     as join\n\n# Detect ENV type from path\nsrc_path     = abspath(dirname(__file__))           # /home/pi/Dev/home_alarm/src\nproject_path = dirname(src_path)                    # /home/pi/Dev/home_alarm\nenv_path     = dirname(project_path)                # /home/pi/Dev\nconf_path    = join(env_path, \"home_alarm_CONFIG/\")  # /home/pi/Dev/home_alarm_CONFIG\n\nimport signal\nimport sys\nfrom os.path import join as join\nfrom transitions import Machine\nfrom time import sleep\nfrom datetime import datetime\nimport zmq\nimport logging\n\n\"\"\" Configure logger \"\"\"\nfrom utils.logger_config import flask_logger_settings\nfrom logging.config import dictConfig\ndictConfig(flask_logger_settings)\nlogger = logging.getLogger('extalarm.process')\n\n\"\"\" Import project util dependencies \"\"\"\nfrom utils.UnipiIO       import UnipiInput, UnipiOutput\nfrom utils.config_helper import dict_from_json_file\nfrom utils.emails        import EmailAlarmAlert\nfrom utils.sms           import SmsAlarmAlert\nfrom web                 import create_app\nfrom web.models          import DBLog\n\n\"\"\" import socket to thread gateway \"\"\"\nfrom ext_alarm import zmq_socket_config\n\n\"\"\" UniPi IO config file \"\"\"\nUNIPI_IO_CONFIG = join(conf_path, 'software', 'nox_unipi_io.json')\n\n#DEBUG = None\nDEBUG = True\n\nBIND_TO_NOX = True # None / True. bind start/stop to NoxAlarm status\n\nclass ExtAlarm(object):\n    \"\"\" La class ExtAlarm est une machine à état qui vérifie l'état dedes détecteurs.\n    L'initialisation configure \n    - les entrées (PIR Terrasse) \n    - les sortie (Lumière Terrasse)\n    L'appel de la fonction run_states() provoque le rafraississement des valeurs en entrées. \n    run_states() doit être appelée dans une boucle while à interval régulier (~1 seconde)\n    Lorsque la machine change d'état, la fonction push_socket_event() émet l'info sur un socket. \n    le socket est passé en paramètre à l'init.\n    Un programme externe (appli web) appelle la fonction push_socket_state() à intervalle régulier \n    pour connaitre l'état de la machine (on, off, etc).\n    \"\"\"\n    \n    states = ['init' , 'off'     , 'on'      , 'alert'     ]\n    colors = ['info' , 'success' , 'primary' , 'warning'   , 'primary']\n    events = ['init' , 'stop'    , 'start'   , 'detection' , 'serene_stop']\n    DELAY_ALERT = 60*4 # Delay for alert timer (in ~second)\n    DELAY_FLASH_GARAGE = 60*4 # Delay for alert timer (in ~second)\n\n    name        = 'Ext'\n    cycle_delay = 1    # While Loop cycle delay\n    state_requested    = None # Record the state On/Off requested by user\n    timer_alert        = -1 # timer during alert\n    timer_flash_garage = -1 # timer during flash garage\n\n\n    # --- Init functions ---\n    def init_socket(self):\n        context = zmq.Context()\n        \n        try:\n            # Socket SUB_COMMAND Receive Commands (start stop) from Flask (ThreadExtAlarm)\n            self.SUB_COMMAND = context.socket(zmq.SUB)\n            self.SUB_COMMAND.connect (\"tcp://localhost:%s\" % zmq_socket_config.port_socket_extalarm_command)\n            self.SUB_COMMAND.setsockopt_string(zmq.SUBSCRIBE, zmq_socket_config.TOPIC_REQUEST)\n\n            # Socket PUB_STATUS sends Status updates to Flask (ThreadExttAlarm)\n            self.PUB_STATE = context.socket(zmq.PUB)\n            self.PUB_STATE.bind(\"tcp://*:%s\" % zmq_socket_config.port_socket_extalarm_state)\n        except:\n            msg = 'Failed init ZMQ socket'\n            logger.exception(msg)\n            self.exit(msg, exit_now=True)\n            \n    def init_config(self):\n        try:\n            # load config from json\n            logger.info(\"Loading config file %s\" % (UNIPI_IO_CONFIG))\n            conf = dict_from_json_file(UNIPI_IO_CONFIG)\n            # declare I/O from config\n            self.in_nox_alert       = UnipiInput(conf['in_alert'])\n            self.in_nox_power       = UnipiInput(conf['in_power'])\n            self.in_pir_terrasse    = UnipiInput(conf['in_pir_terrasse'])\n            self.in_pir_garage      = UnipiInput(conf['in_pir_garage'])\n            self.out_light_terrasse = UnipiOutput(conf['out_light_terrasse'])\n            self.out_light_garage   = UnipiOutput(conf['out_light_garage'])\n        except Exception as e:\n            name = e.__class__.__name__ # name of the exception eg\n            if (name == 'FileNotFoundError'):\n                logger.error('Config file not found %s' % (UNIPI_IO_CONFIG))\n            elif (name == 'KeyError'):\n                logger.error('config file corrupted')\n            else:\n                # Generic error: log trace\n                logger.exception('Error loading config %s' % (str(sys.exc_info()[0])))\n            \n            # Whatever the exception, conf failed, exit the program\n            msg = 'Failed init Config'\n            self.exit(msg, exit_now=True)\n    \n    def init_statemachine(self):\n        # State Machine\n        self.machine = Machine(model=self, states=ExtAlarm.states, initial='init')\n        \n        # Transitions\n        self.machine.add_transition('off_to_on',      'off',     'on',        before='starting',    after='push_socket_state')\n        self.machine.add_transition('any_to_off' ,    '*'  ,     'off',       before='stopping',    after='push_socket_state')\n        self.machine.add_transition('on_to_alert',    'on' ,     'alert',     before='detection',   after='push_socket_state')\n        self.machine.add_transition('alert_to_on',    'alert',   'on',        before='serene_stop', after='push_socket_state')\n        #self.machine.add_transition('was_alert_yo_on',    'was_alert','on',       before='serene_stop', after='push_socket_state')\n    \n    def init_state(self):\n        \"\"\" Set the real state of the system when the program (re)start\n        Transition init -> any is done \n        callback leave_init() is call manually.\n        No email/sms alert will be sent.\n        If Nox alarm is ON, then ExtAlarm is started.\n        If Nox alarm is ON and under alert, then ExtAlarm is put on alert.\n        \"\"\"\n        self.out_light_terrasse.set_relay(0)\n        self.out_light_garage.set_relay(0)\n        self.read_inputs()\n        if (self.in_pir_terrasse.value == 1) and (self.in_nox_power.value == 1):\n            self.state = 'alert'\n        elif (self.in_nox_power.value == 1):\n            self.state = 'on'\n        else:\n            self.state = 'off'\n        self.leave_init()\n        \n    def __init__(self):\n        logger.info('Starting ...')\n        \n        self.run = True # Flag to stop while loop. (on KeyboardInterrupt or SIGINT)\n    \n        # Register signal handler\n        # KeyboardInterrupt (SIGINT) managed directly in main loop\n        signal.signal(signal.SIGTERM, self.exit_from_signals) # Supervisor Exit code (15)\n        \n        self.init_socket()\n        self.init_config()\n        self.init_statemachine()\n        self.init_state() # Read inputs and Set state after init\n                \n    def __str__(self):\n        out = ''\n        out += ('Ext State: %s | ' % (self.state))        \n        for input in [self.in_pir_terrasse, self.in_pir_garage]:\n            out += ('%s %s | ' % (input.name, input.value))        \n        for output in [self.out_light_terrasse, self.out_light_garage]:\n            out += ('%s %s | ' % (output.name, output.value))        \n        out += ('timer alert %s | ' % (self.timer_alert))        \n        out += ('timer flash garage %s | ' % (self.timer_flash_garage))        \n        return(out)\n        \n    # --- Exit functions (Stop Process) ---\n    def exit_from_signals(self, signal_num, frame):\n        \"\"\" Callback called when SIGTERM received from supervisor \n        Do call exit() with detail of the signal_num\n        \"\"\"\n        detail = 'signal {}'.format(signal_num)\n        self.exit(detail)\n\n    def exit(self, detail, exit_now=None):\n        \"\"\" Stop the process (log before)\n        'exit_now': Option to stop now or to set self.run to False (will stop at the end of the current while loop cycle)\n        \"\"\"\n        self.make_DBLog('system', 'exit', 'danger', detail=detail)\n        logger.critical('Exit caused by {}'.format(detail))\n        msg = 'exit'\n        if exit_now: sys.exit() # exit here\n        else: self.run = False  # exit after end of current loop\n\n\n    # --- Handle commands from web App ---\n    def start_alarm(self):\n        \"\"\" Command to start alarm. \"\"\"\n        self.state_requested = 1\n        \n    def stop_alarm(self):\n        \"\"\" Command to stop alarm. \"\"\"\n        self.state_requested = 0\n\n        \n    # --- StateMachine Callbacks (Actions on state change) ---\n    def leave_init(self):\n        \"\"\" From state init to any other state\n        This is not a callback (called manually)\n        \"\"\"\n        msg = 'init (state: {})'.format(self.state)\n        logger.info(msg)\n        event = 'init'\n        self.push_socket_event(event)        \n        color = ExtAlarm.colors[ExtAlarm.events.index(event)]\n        self.make_DBLog('system', msg, color)\n\n    def starting(self):\n        event = 'start'\n        logger.info('state is %s' % (event))\n        self.push_socket_event(event)\n        color = ExtAlarm.colors[ExtAlarm.events.index(event)]\n        self.make_DBLog(\"event\", evcolorscolorsecolorsnt, color)colors\n\n    def stopping(self):colors\n        self.stop_light_garage()\n        event = 'stop'\n        logger.info('state is %s' % (event))\n        self.push_socket_event(event)\n        color = ExtAlarm.colors[ExtAlarm.events.index(event)]\n        self.make_DBLog(\"event\", event, color)\n\n    def detection(self):\n        event = 'detection'\n        logger.info('state is %s' % (event))\n        self.push_socket_event(event)\n        color = ExtAlarm.colors[ExtAlarm.events.index(event)]\n        self.make_DBLog(\"event\", event, color)\n        self.make_alert(\"Alert\", ExtAlarm.name, event)\n        self.out_light_terrasse.set_relay(1)\n        self.out_light_garage.set_relay(1)\n        self.timer_alert = self.DELAY_ALERT\n\n    def serene_stop(self):\n        event = 'serene_stop'\n        logger.info('state is %s' % (event))\n        self.push_socket_event(event)\n        color = ExtAlarm.colors[ExtAlarm.events.index(event)]\n        self.make_DBLog(\"event\", event, color)\n        self.make_alert(\"Info\", ExtAlarm.name, event)\n        self.out_light_terrasse.set_relay(0)\n        self.out_light_garage.set_relay(0)\n                \n    @staticmethod\n    def make_alert(*args):\n        \"\"\" wrapper method to call mail & sms alerts \"\"\"\n        if not DEBUG:\n            try: SmsAlarmAlert(*args)\n            except: logger.exception('Fail calling SmsAlarmAlert()')\n            try: EmailAlarmAlert(*args)\n            except: logger.exception('Fail calling EmailAlarmAlert()')\n    \n    @staticmethod\n    def make_DBLog(subject, event, badge, detail=''):\n        \"\"\" wrapper method to call DBLog.new() on alarm event \"\"\"\n        app = create_app()\n        with app.app_context():\n            DBLog.new(subject=subject, scope=\"ext\", badge=badge, message=event, ip='-', user='-', detail=detail)\n\n    # --- Push info to web App socket ---\n    def push_socket_event(self, event):\n        self.PUB_STATE.send_string(zmq_socket_config.TOPIC_EVENT + \" \" + event)\n        logger.debug(\"Extalarm send event \"+ event)\n            \n    def push_socket_state(self):\n        if DEBUG: logger.debug(\"Extalarm send state \"+ self.state)\n        self.PUB_STATE.send_string(zmq_socket_config.TOPIC_STATE + \" \" + self.state)\n\n    # --- Read UniPi inputs ---\n    def read_inputs(self):\n        \"\"\" Read physical IO from Unipi, update class variables. \"\"\"\n        self.in_nox_alert.read()\n        self.in_nox_power.read()\n        self.in_pir_terrasse.read()\n        self.in_pir_garage.read()\n        self.out_light_terrasse.read()\n        self.out_light_garage.read()\n    \n    def manage_light_garage(self):\n        \"\"\" If nox is ON and pir_garage is 1, then set light garage to ON \n        \"\"\"\n        # Light on, start timer \n        if (self.in_nox_power.value == 1 and self.in_pir_garage.value == 1):\n            if (self.out_light_terrasse.value == 0):\n                self.out_light_terrasse.set_relay(1)\n                self.timer_flash_garage = self.DELAY_FLASH_GARAGE\n        \n        # Stop light, Stop timer\n        elif (self.in_nox_power.value == 0):\n            if (self.out_light_terrasse.value == 1):\n                self.out_light_terrasse.set_relay(0)\n                self.timer_flash_garage = -1\n\n        # Decrement timer\n        elif (self.timer_flash_garage > 0):\n            self.timer_flash_garage -= 1\n\n        # Decrement timer\n        elif (self.timer_flash_garage < 0):\n            if (self.out_light_terrasse.value == 1):\n                self.out_light_terrasse.set_relay(0)\n    \n    def manage_light_garage_old(self):\n        \"\"\" If nox is ON and pir_garage is 1, then set light garage to ON \n        \"\"\"\n        if (self.in_pir_garage.value == 1):\n            self.out_light_terrasse.set_relay(1)\n            self.timer_flash_garage = self.DELAY_FLASH_GARAGE\n        \n        else:\n            # Decrement alert delay\n            self.timer_flash_garage -= 1\n\n            if self.timer_flash_garage < 0:\n                self.timer_flash_garage = None\n                self.out_light_terrasse.set_relay(0)\n    \n    def stop_light_garage(self):\n        \"\"\" stop light garage and stop timer \n        \"\"\"\n        self.out_light_terrasse.set_relay(0)\n        self.timer_flash_garage = -1\n    \n    def run_states(self):\n        \"\"\" Process transitions considering UniPi inputs \n        \"\"\"\n        if (self.state == \"off\"):\n            if (self.state_requested == 1):\n                self.off_to_on()\n            \n            if (BIND_TO_NOX) and (self.in_nox_power.value == 1):\n                self.off_to_on()\n            \n        elif self.state == \"on\":\n            self.manage_light_garage()\n            if (BIND_TO_NOX) and (self.in_nox_power.value == 0):\n                self.any_to_off()\n                \n            if (self.in_pir_terrasse.value == 1):\n                self.on_to_alert()\n        \n        elif self.state == \"alert\":\n            if (self.state_requested == 0):\n                self.off_to_off()\n            \n            if (BIND_TO_NOX) and (self.in_nox_power.value == 0):\n                self.off_to_off()\n            \n            elif (self.in_pir_terrasse.value == 1):\n                self.timer_alert = self.DELAY_ALERT\n            \n            else:\n                # Decrement alert delay\n                self.timer_alert -= 1\n\n                if self.timer_alert < 0:\n                    self.timer_alert = None\n                    self.alert_to_on()\n\n\n    def receive_request(self):\n        \"\"\" Check if a request is received and process it\n        Request can be Command (start, stop) \n        Request can be \"Status update\" requested by web app \n        \"\"\"\n        try:\n            payload = self.SUB_COMMAND.recv_string(flags=zmq.NOBLOCK)\n            topic, command = payload.split()\n            if (topic == zmq_socket_config.TOPIC_REQUEST):\n                if (command == zmq_socket_config.COMMAND_START):\n                    logger.debug(\"Extalarm receive COMMAND_START\")\n                    self.start_alarm()\n                elif (command == zmq_socket_config.COMMAND_STOP):\n                    logger.debug(\"Extalarm receive COMMAND_STOP\")\n                    self.stop_alarm()\n                elif (command == zmq_socket_config.STATUS_UPDATE):\n                    logger.debug(\"Extalarm receive REQUEST_STATUS_UPDATE\")\n                    self.push_socket_state()\n        \n        # Else if no command received, do nothing\n        except zmq.error.Again:\n            pass \n\n            \nif __name__ == '__main__':\n    \"\"\" Init ext Alarm Statemachine and run infinite loop\n    Called from console for debug\n    Called and managed by supervisor for production\n    \"\"\"\n    if DEBUG:\n        logger.warning(\"DEBUG mode ON\")\n    else:\n        logger.debug(\"DEBUG mode OFF\")\n    ext = ExtAlarm()\n    logger.info(\"Process is Running (cycle delay %ss)\" % (ext.cycle_delay))\n    \n    while(ext.run):\n        try:\n            if DEBUG: logger.debug('{}'.format(ext))\n            ext.read_inputs()\n            ext.run_states()\n            ext.receive_request()\n            # Commented out : no more sent each second but on demand (when web page is loaded or on alarm state change)\n            # ext.push_socket_state()\n            sleep(ExtAlarm.cycle_delay)\n        except KeyboardInterrupt:\n            logger.warning(\"Exit caused by KeyboardInterrupt\")\n            ext.exit('KeyboardInterrupt', exit_now=False)\n        ",
			"file": "src/extAlarmProcess.py",
			"file_size": 15755,
			"file_write_time": 132469253237270108,
			"settings":
			{
				"buffer_size": 16793,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/utils/UnipiIO.py",
			"settings":
			{
				"buffer_size": 5083,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "[group:prod]\nprograms=gunicorn,nox_alarm\n\n[program:gunicorn]\nuser=pi\ncommand = /home/pi/.virtualenvs/prod/bin/gunicorn -k gevent -w 1 main:app\ndirectory =      /home/pi/Prod/home_alarm/src\nstdout_logfile = /home/pi/Prod/home_alarm_LOG/gunicorn.log\nstderr_logfile = /home/pi/Prod/home_alarm_LOG/gunicorn.err\nstdout_logfile_maxbytes=1MB\nstdout_logfile_backups=2\nstderr_logfile_maxbytes=1MB\nstderr_logfile_backups=2\nstopasgroup=true\nkillasgroup=true\nautostart=true\nautorestart=true\nstopsignal=INT\n\n[program:nox_alarm]\nuser=pi\ndirectory = /home/pi/Prod/home_alarm/src\ncommand = /home/pi/.virtualenvs/prod/bin/python noxAlarmProcess.py\nstdout_logfile = /home/pi/Prod/home_alarm_LOG/NoxProcess.log\nstderr_logfile = /home/pi/Prod/home_alarm_LOG/NoxProcess.err\nstdout_logfile_maxbytes=1MB\nstdout_logfile_backups=2\nstderr_logfile_maxbytes=1MB\nstderr_logfile_backups=2\nstopasgroup=true\nkillasgroup=true\nautostart=true\nautorestart=true\n\n",
			"file": "/media/alarm_dev/home_alarm_CONFIG/etc/supervisor_alarm_prod.conf",
			"file_size": 958,
			"file_write_time": 132337989253768435,
			"settings":
			{
				"buffer_size": 926,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/web/views/nox.py",
			"settings":
			{
				"buffer_size": 2702,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/web/views/ext.py",
			"settings":
			{
				"buffer_size": 2273,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"br",
				"Browse Mode: Outline (Right)"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"package",
				"Preferences: Browse Packages"
			],
			[
				"ressource",
				"PackageResourceViewer: Open Resource"
			],
			[
				"Packagere",
				"PackageResourceViewer: Open Resource"
			],
			[
				"PackageResourceViewer: Open Resource",
				"PackageResourceViewer: Open Resource"
			],
			[
				"ressou",
				"PackageResourceViewer: Open Resource"
			],
			[
				"markdo",
				"MarkdownLivePreview: Open Preview"
			],
			[
				"markd",
				"MarkdownLivePreview: Open Preview"
			],
			[
				"ma",
				"MarkdownLivePreview: Open Settings"
			],
			[
				"MarkdownLivePreview",
				"MarkdownLivePreview: Open Settings"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 400.0,
		"history":
		[
			"window.run_command(\"open_file\", {\"file\": \"$packages/User/Default ($platform).sublime-mousemap\"})",
			"exit()",
			"exti()",
			"view.settings().get('html')",
			"view.settings().get('font_face')",
			"clear"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/media/alarm_dev/home_alarm",
		"/media/alarm_dev/home_alarm/src",
		"/media/alarm_dev/home_alarm/src/ext_alarm",
		"/media/alarm_dev/home_alarm/src/nox_alarm",
		"/media/alarm_dev/home_alarm/src/utils",
		"/media/alarm_dev/home_alarm/src/web",
		"/media/alarm_dev/home_alarm/src/web/templates",
		"/media/alarm_dev/home_alarm/src/web/views",
		"/media/alarm_dev/home_alarm_CONFIG",
		"/media/alarm_dev/home_alarm_CONFIG/etc",
		"/media/alarm_dev/home_alarm_CONFIG/software"
	],
	"file_history":
	[
		"/home/cheperboy/.config/sublime-text-3/Packages/User/Default (Linux).sublime-mousemap",
		"/media/alarm_dev/home_alarm/src/utils/UnipiIO.py",
		"/media/alarm_dev/home_alarm/src/web/templates/ext-panel.html.j2",
		"/home/cheperboy/rsync_backup/rsync_tasks.sh",
		"/media/alarm_dev/home_alarm/src/extAlarmProcess.py",
		"/media/alarm_dev/home_alarm_CONFIG/software/nox_unipi_io.json",
		"/media/alarm_dev/home_alarm/src/nox_alarm/zmq_socket_config.py",
		"/media/alarm_dev/home_alarm/src/nox_alarm/noxGateway.py",
		"/run/user/1000/gvfs/smb-share:server=alarm.local,share=partage/home_alarm_CONFIG/software/nox_unipi_io.json",
		"/media/alarm_dev/home_alarm/home_alarm.sublime-project",
		"/run/user/1000/gvfs/smb-share:server=alarm.local,share=partage/home_alarm/src/ext_alarm/extGateway.py",
		"/run/user/1000/gvfs/smb-share:server=alarm.local,share=partage/home_alarm/src/ext_alarm_old/socket_const.py",
		"/run/user/1000/gvfs/smb-share:server=alarm.local,share=partage/home_alarm/src/ext_alarm/zmq_socket_config.py",
		"/run/user/1000/gvfs/smb-share:server=alarm.local,share=partage/home_alarm/src/noxAlarmProcess.py",
		"/run/user/1000/gvfs/smb-share:server=alarm.local",
		"/run/user/1000/gvfs/smb-share:server=alarm.local,share=partage/home_alarm/src/utils/logger_config.py",
		"/run/user/1000/gvfs/smb-share:server=alarm.local,share=partage/home_alarm/src/nox_alarm/__init__.py",
		"/run/user/1000/gvfs/smb-share:server=alarm.local,share=partage/home_alarm/src/ext_alarm/extMachine.py",
		"/run/user/1000/gvfs/smb-share:server=alarm.local,share=partage/home_alarm/home_alarm.sublime-project",
		"/run/user/1000/gvfs/smb-share:server=alarm.local,share=partage/home_alarm/.git/config",
		"//alarm/Partage/home_alarm/home_alarm.sublime-project",
		"//alarm/Partage/linux/scripts/pref/sublime_user_settings.json",
		"//alarm/Partage/home_alarm/src/config.py",
		"//alarm/Partage/home_alarm/docs/server_config.md",
		"//alarm/Partage/home_alarm/src/noxAlarmProcess.py",
		"//alarm/Partage/home_alarm/src/utils/sms.py",
		"//alarm/Partage/home_alarm/src/web/views/system_info.py",
		"//alarm/Partage/home_alarm/src/utils/emails.py",
		"//alarm/Partage/home_alarm/src/installer.py",
		"//alarm/Partage/home_alarm/src/web/templates/_header.html.j2",
		"//alarm/Partage/home_alarm/etc/nginx/sites-enabled/home_alarm.nginx",
		"//alarm/Partage/home_alarm/etc/supervisor_alarm_prod.conf",
		"//alarm/Partage/linux/docs/web.md",
		"//alarm/Partage/home_alarm/etc/supervisor_alarm_dev.conf",
		"//alarm/Partage/home_alarm/TODO.md",
		"/C/Users/matthieu/AppData/Roaming/Sublime Text 3/Packages/User/ApplySyntax.sublime-settings",
		"//alarm/Partage/home_alarm/etc/cron_chaudiere_cron_prod",
		"/C/Users/matthieu/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"//alarm/Partage/home_alarm/etc/nginx/sites-enabled/home_alarm_http.nginx",
		"/C/Users/matthieu/AppData/Roaming/Sublime Text 3/Packages/User/Bash.sublime-settings",
		"/C/Users/matthieu/AppData/Roaming/Sublime Text 3/Packages/User/Shell-Unix-Generic.sublime-settings",
		"/C/Users/matthieu/AppData/Roaming/Sublime Text 3/Packages/User/nginx.sublime-settings",
		"/C/Users/matthieu/AppData/Roaming/Sublime Text 3/Packages/Theme - Monokai Pro/Theme - Monokai Pro.sublime-settings",
		"/C/Users/matthieu/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/C/Users/matthieu/AppData/Roaming/Sublime Text 3/Packages/User/Theme - Monokai Pro.sublime-settings",
		"/C/Users/matthieu/AppData/Roaming/Sublime Text 3/Packages/User/Plain text.sublime-settings",
		"//alarm/Partage/home_alarm/src/web/static/js/alarm.js",
		"//alarm/Partage/home_alarm/src/web/templates/index.html.j2",
		"//alarm/Partage/home_alarm/src/web/templates/_nox-panel.html.j2",
		"//alarm/Partage/home_alarm/src/web/static/css/common.css",
		"//alarm/Partage/home_alarm/src/web/templates/_navbar.html.j2",
		"//alarm/Partage/home_alarm/etc/nginx/sites-enabled/home_alarm",
		"//alarm/Partage/home_alarm/README.md",
		"//alarm/Partage/home_alarm/etc/nginx/sites-enabled/evok",
		"/C/Users/matthieu/AppData/Roaming/Sublime Text 3/Packages/PackageResourceViewer/PackageResourceViewer.sublime-settings",
		"/C/Users/matthieu/AppData/Roaming/Sublime Text 3/Packages/PackageResourceViewer/README.md",
		"/C/Users/matthieu/AppData/Roaming/Sublime Text 3/Packages/User/HTML (Rails).sublime-settings",
		"/C/Users/matthieu/AppData/Roaming/Sublime Text 3/Packages/User/Package Control.sublime-settings",
		"/C/Users/matthieu/AppData/Roaming/Sublime Text 3/Packages/User/PackageResourceViewer.sublime-settings",
		"/C/Users/matthieu/AppData/Roaming/Sublime Text 3/Packages/sublime-markdown-extended/Syntaxes/Markdown Extended.JSON-tmLanguage",
		"/C/Users/matthieu/AppData/Roaming/Sublime Text 3/Packages/User/Ruby Haml.sublime-settings",
		"//alarm/Partage/home_alarm/src/web/templates/ext-panel.html.j2",
		"//alarm/Partage/home_alarm/src/web/templates/alarms-panel.html.j2",
		"//alarm/Partage/home_alarm/src/web/templates/index.html",
		"//alarm/Partage/home_alarm/src/web/templates/login.html",
		"//alarm/Partage/home_alarm/src/web/templates/admin/partials_alarm/_logins.html.j2",
		"//alarm/Partage/home_alarm/src/web/__init__.py",
		"//alarm/Partage/home_alarm/etc/nginx/sites-enabled/home_alarm_http",
		"//alarm/Partage/linux/docs/security.md",
		"//alarm/Partage/home_alarm/src/main.py",
		"//alarm/Partage/minimal/app.py",
		"//alarm/Partage/home_alarm/src/etc/email_config_secret.json",
		"/C/Users/matthieu/AppData/Roaming/Sublime Text 3/Packages/Theme - Default/adaptive/Adaptive.sublime-theme",
		"/C/Users/matthieu/AppData/Roaming/Sublime Text 3/Packages/Theme - Default/Widget - Default.sublime-settings",
		"/C/Users/matthieu/AppData/Roaming/Sublime Text 3/Packages/Theme - Default/Default.sublime-theme",
		"//alarm/Partage/home_alarm/docs/dev_workflow.md",
		"//alarm/Partage/home_alarm/.gitignore",
		"/C/Users/matthieu/AppData/Roaming/Sublime Text 3/Packages/Babel/Babel.sublime-settings",
		"/C/Users/matthieu/AwesomeProject/babel.config.js",
		"/C/Users/matthieu/AwesomeProject/app.json",
		"/C/Users/matthieu/AwesomeProject/App.js",
		"//alarm/Partage/home_alarm/docs/index.md",
		"//alarm/Partage/home_alarm/src/nox_alarm/noxGateway.py"
	],
	"find":
	{
		"height": 42.0
	},
	"find_in_files":
	{
		"height": 151.0,
		"where_history":
		[
			"/media/alarm_dev/",
			"/media/alarm_dev/home_alarm_CONFIG",
			"/run/user/1000/gvfs/smb-share:server=alarm.local,share=partage/home_alarm/src/ext_alarm,/run/user/1000/gvfs/smb-share:server=alarm.local,share=partage/home_alarm/src",
			"/run/user/1000/gvfs/smb-share:server=alarm.local,share=partage/home_alarm/src/ext_alarm"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"in_nox_power",
			"in_nox_alert",
			"leave_init",
			"value",
			"timer_flash_garage",
			"PANEL_EXT",
			"timer_alert",
			"timer_alerttimer",
			"timer_alert",
			"timer",
			"timer_alert",
			"ALERT_DELAY",
			"etc",
			"serene_stop",
			"colors",
			"states",
			"ALERT_DELAY",
			"timer_alert",
			"out_power",
			"serene_stop",
			"detection",
			"on_to_alert",
			"nox",
			"Nox",
			"nox",
			"DEBUG",
			"stop_alarm",
			"alert_to_on",
			"serene_stop",
			"events",
			"serene_stop",
			"state_requested",
			"NoxAlarm",
			"nox_unipi_io"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"DELAY_ALERT",
			"ext",
			"ExtAlarm"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/noxAlarmProcess.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12967,
						"regions":
						{
						},
						"selection":
						[
							[
								231,
								231
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/config.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2243,
						"regions":
						{
						},
						"selection":
						[
							[
								319,
								319
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/extAlarmProcess.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16793,
						"regions":
						{
						},
						"selection":
						[
							[
								13448,
								13448
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4498.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/utils/UnipiIO.py",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 5083,
						"regions":
						{
						},
						"selection":
						[
							[
								950,
								950
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1296.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/media/alarm_dev/home_alarm_CONFIG/etc/supervisor_alarm_prod.conf",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 926,
						"regions":
						{
						},
						"selection":
						[
							[
								387,
								387
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/web/views/nox.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2702,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/web/views/ext.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2273,
						"regions":
						{
						},
						"selection":
						[
							[
								483,
								483
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 39.0
	},
	"input":
	{
		"height": 92.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "home_alarm.sublime-project",
	"replace":
	{
		"height": 76.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"README.md"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 650.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 494.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 244.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
